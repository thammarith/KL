---
alwaysApply: true
---

# Internationalization (i18n) Guidelines

## Translation Files
- Translation files are located in [src/locales/](mdc:src/locales/)
- Current supported languages: English (`en-GB.json`) and Thai (`th.json`)
- Always update ALL translation files when adding new strings

## Using Translations
- Never use hardcoded strings in components
- Use the translation utility from [src/utils/i18n.ts](mdc:src/utils/i18n.ts)
- Use descriptive translation keys following dot notation

Example:
```typescript
// ❌ Bad - hardcoded string
<button>Add Person</button>

// ✅ Good - using translation
<button>{t('people.add')}</button>
```

## Translation Key Naming
- Use dot notation for nested keys
- Use descriptive names that indicate context
- Group related translations together

Examples:
- `people.add` - Add person button
- `people.edit` - Edit person button
- `people.delete.confirm` - Delete confirmation message
- `bill.items.total` - Bill total amount
- `errors.validation.required` - Required field error

## Adding New Translations
1. Add the key to [src/locales/en-GB.json](mdc:src/locales/en-GB.json)
2. Add the corresponding translation to [src/locales/th.json](mdc:src/locales/th.json)
3. Use the translation in your component with `t('your.key')`

## Pluralization and Variables
- Use variables for dynamic content: `"Hello {{name}}"`
- Consider pluralization rules for both languages
- Use appropriate formatting for numbers and dates
