name: Deploy to GitHub Pages

on:
    push:
        branches: [main]
    pull_request:
        branches: [main]

jobs:
    # Shared build job
    build:
        runs-on: ubuntu-latest

        steps:
            - name: Checkout
              uses: actions/checkout@v4

            - name: Setup Node.js
              uses: actions/setup-node@v4
              with:
                  node-version: '22'

            - name: Setup pnpm
              uses: pnpm/action-setup@v4
              with:
                  version: '10.12.4'

            - name: Get pnpm store directory
              shell: bash
              run: |
                  echo "STORE_PATH=$(pnpm store path --silent)" >> $GITHUB_ENV

            - name: Setup pnpm cache
              uses: actions/cache@v4
              with:
                  path: ${{ env.STORE_PATH }}
                  key: ${{ runner.os }}-pnpm-store-${{ hashFiles('**/pnpm-lock.yaml') }}
                  restore-keys: |
                      ${{ runner.os }}-pnpm-store-

            - name: Install dependencies
              run: pnpm install --frozen-lockfile

            - name: Build for production
              if: github.ref == 'refs/heads/main'
              run: pnpm build

            - name: Build for preview
              if: github.event_name == 'pull_request'
              run: pnpm build
              env:
                  NODE_ENV: development

            - name: Upload build artifacts
              uses: actions/upload-artifact@v4
              with:
                  name: dist-files
                  path: ./dist
                  retention-days: 1

    # Deploy to GitHub Pages (Production)
    deploy-production:
        if: github.ref == 'refs/heads/main'
        needs: build
        runs-on: ubuntu-latest

        permissions:
            contents: read
            pages: write
            id-token: write

        environment:
            name: github-pages
            url: ${{ steps.deployment.outputs.page_url }}

        steps:
            - name: Download build artifacts
              uses: actions/download-artifact@v4
              with:
                  name: dist-files
                  path: ./dist

            - name: Setup Pages
              uses: actions/configure-pages@v4

            - name: Upload to Pages
              uses: actions/upload-pages-artifact@v3
              with:
                  path: ./dist

            - name: Deploy to GitHub Pages
              id: deployment
              uses: actions/deploy-pages@v4

    # Deploy to Surge.sh (PR Preview)
    deploy-preview:
        if: github.event_name == 'pull_request'
        needs: build
        runs-on: ubuntu-latest

        permissions:
            contents: read
            pull-requests: write

        steps:
            - name: Download build artifacts
              uses: actions/download-artifact@v4
              with:
                  name: dist-files
                  path: ./dist

            - name: Deploy to Surge.sh
              run: |
                  npm install -g surge
                  echo "Deploying to: https://kl-pr-${{ github.event.number }}.surge.sh"
                  surge ./dist https://kl-pr-${{ github.event.number }}.surge.sh --token ${{ secrets.SURGE_TOKEN }}
              env:
                  SURGE_TOKEN: ${{ secrets.SURGE_TOKEN }}

            - name: Comment PR with preview URL
              uses: actions/github-script@v7
              with:
                  script: |
                      const prNumber = context.issue.number;
                      const previewUrl = `https://kl-pr-${prNumber}.surge.sh`;

                      const comment = `## ðŸš€ Preview Deployment

                      Your PR has been deployed to a preview environment:

                      **Preview URL:** ${previewUrl}

                      This preview will be available until the PR is closed or merged.

                      ### PWA Features Available:
                      - âœ… Offline functionality
                      - âœ… Install prompt
                      - âœ… Service worker caching

                      ---
                      *This comment will be updated on each new commit.*`;

                      // Check if we already commented
                      const { data: comments } = await github.rest.issues.listComments({
                        owner: context.repo.owner,
                        repo: context.repo.repo,
                        issue_number: prNumber,
                      });

                      const existingComment = comments.find(comment =>
                        comment.user.login === 'github-actions[bot]' &&
                        comment.body.includes('Preview Deployment')
                      );

                      if (existingComment) {
                        // Update existing comment
                        await github.rest.issues.updateComment({
                          owner: context.repo.owner,
                          repo: context.repo.repo,
                          comment_id: existingComment.id,
                          body: comment
                        });
                      } else {
                        // Create new comment
                        await github.rest.issues.createComment({
                          owner: context.repo.owner,
                          repo: context.repo.repo,
                          issue_number: prNumber,
                          body: comment
                        });
                      }
